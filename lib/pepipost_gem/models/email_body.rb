# pepipost_gem
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module PepipostGem
  # Mail Body which will be passed as json in apicall.
  class EmailBody < BaseModel
    # TODO: Write general description for this method
    # @return [List of Personalizations]
    attr_accessor :personalizations

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :tags

    # TODO: Write general description for this method
    # @return [From]
    attr_accessor :from

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :subject

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :content

    # TODO: Write general description for this method
    # @return [List of EmailBodyAttachments]
    attr_accessor :attachments

    # TODO: Write general description for this method
    # @return [Settings]
    attr_accessor :settings

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :reply_to_id

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :template_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['personalizations'] = 'personalizations'
      @_hash['tags'] = 'tags'
      @_hash['from'] = 'from'
      @_hash['subject'] = 'subject'
      @_hash['content'] = 'content'
      @_hash['attachments'] = 'attachments'
      @_hash['settings'] = 'settings'
      @_hash['reply_to_id'] = 'replyToId'
      @_hash['template_id'] = 'templateId'
      @_hash
    end

    def initialize(personalizations = nil,
                   tags = nil,
                   from = nil,
                   subject = nil,
                   content = nil,
                   attachments = nil,
                   settings = nil,
                   reply_to_id = nil,
                   template_id = nil)
      @personalizations = personalizations
      @tags = tags
      @from = from
      @subject = subject
      @content = content
      @attachments = attachments
      @settings = settings
      @reply_to_id = reply_to_id
      @template_id = template_id
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      # Parameter is an array, so we need to iterate through it
      personalizations = nil
      unless hash['personalizations'].nil?
        personalizations = []
        hash['personalizations'].each do |structure|
          personalizations << (Personalizations.from_hash(structure) if structure)
        end
      end
      tags = hash['tags']
      from = From.from_hash(hash['from']) if hash['from']
      subject = hash['subject']
      content = hash['content']
      # Parameter is an array, so we need to iterate through it
      attachments = nil
      unless hash['attachments'].nil?
        attachments = []
        hash['attachments'].each do |structure|
          attachments << (EmailBodyAttachments.from_hash(structure) if structure)
        end
      end
      settings = Settings.from_hash(hash['settings']) if hash['settings']
      reply_to_id = hash['replyToId']
      template_id = hash['templateId']

      # Create object from extracted values.
      EmailBody.new(personalizations,
                    tags,
                    from,
                    subject,
                    content,
                    attachments,
                    settings,
                    reply_to_id,
                    template_id)
    end
  end
end
